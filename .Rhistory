readRDS("latest_run.RDS")
saveRDS(speed_list,"Piteator/km_list.RDS")
#Goal
#====
w_left <- as.numeric((as.Date("2022-12-31") - Sys.Date())/7)
km_left <- m_left*10
goal <- paste("FÃ¶r att uppnÃ¥ mÃ¥let behÃ¶ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(goal,"Piteator/goal.RDS")
readRDS("Piteator/goal.RDS")
#Title
#=====
title <- "PiteÃ¥ tur och retur 2022"
saveRDS(title,"Piteator/title.RDS")
readRDS("Piteator/title.RDS")
texts <- c()
texts$title <- "Pite? tur och retur 2022"
texts$trend_dev <- paste(dev,"km fr?n ideallinjen")
texts$goal_w <- paste("F?r att uppn? mÃ¥let beh?ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(texts,"Piteator/texts.RDS")
readRDS("Piteator/texts.RDS")
#Deviation from trendline
#========================
real_data <- real_data[real_data$type == substr(Sys.Date(),1,4),]
last_date <- real_data$Day[nrow(real_data)]
dev <- round(trendline_data$cum[last_date]-real_data$cum[nrow(real_data)],0)
dev_text <- paste(dev,"km frÃ¥n ideallinjen")
saveRDS(dev_text,"Piteator/dev_text.RDS")
readRDS("Piteator/dev_text.RDS")
source("Metrics.R")
saveRDS(metrics,"metrics.RDS")
saveRDS(weekly,"weekly.RDS")
saveRDS(monthly,"monthly.RDS")
saveRDS(yearly,"yearly.RDS")
readRDS("metrics.RDS")
saveRDS(metrics,"Piteator/metrics.RDS")
saveRDS(weekly,"Piteator/weekly.RDS")
saveRDS(monthly,"Piteator/monthly.RDS")
saveRDS(yearly,"Piteator/yearly.RDS")
#library(shiny)
#runApp("Piteator")
#install.packages('rsconnect')
rsconnect::setAccountInfo(name='anvi2533',
token='026B936A5A75EBDFDAE8AE09012C4BF0',
secret='fAQVZf7CdgMV8pUsG0l9Ud3x9pLZ3qhd8vBOdqgG')
library(rsconnect)
rsconnect::deployApp("Piteator", forceUpdate = T)
#source("install_pack.R")
source("Load_lib.R")
#Location of the GPX files
path = paste(getwd(),"/GPX/",sep = "")
files <- list.files(path)
files <- unique(files)
#check if update is needed
nr_files <- length(files)
check <- readRDS("nr_files.RDS")
datalist = list()
date_time <- c()
training_date <- c()
if(nr_files != check){
#create distance vector
source("fn_distance_vector.R")
distance <- fn_distance_vector()
saveRDS(distance,"distance.RDS")
#create date time vector
source("fn_datetime_vector.R")
date_time <- fn_datetime_vector()
saveRDS(date_time,"date_time.RDS")
#create duration vector
source("fn_duration_vector.R")
duration <- fn_duration_vector()
saveRDS(duration,"duration.RDS")
saveRDS(nr_files,"nr_files.RDS")
saveRDS(nr_files,"Piteator/nr_files.RDS")
}
source("create_df_from_vectors.R", encoding = 'ISO-8859-1')
#Distance 2022 so far
dist_2022 <- df[!is.na(df$CY),]
current_stat <- sum(dist_2022$Distance)
m_left <- (1610000 - current_stat)/10000
print(paste(round(m_left,2), "mil"))
source("trendline.R", encoding = 'ISO-8859-1')
saveRDS(p,"trendline.RDS")
saveRDS(p,"Piteator/trendline.RDS")
readRDS("trendline.RDS")
source("Locus.R")
saveRDS(n,"piteator.RDS")
saveRDS(n,"Piteator/piteator.RDS")
readRDS("piteator.RDS")
#street view: http://www.instantstreetview.com/s/61.14598,17.03262
path = paste(getwd(),"/GPX/",files[length(files)],sep = "")
source("LastRun.R")
saveRDS(m,"latest_run.RDS")
saveRDS(m,"Piteator/latest_run.RDS")
readRDS("latest_run.RDS")
saveRDS(speed_list,"Piteator/km_list.RDS")
#Goal
#====
w_left <- as.numeric((as.Date("2022-12-31") - Sys.Date())/7)
km_left <- m_left*10
goal <- paste("FÃ¶r att uppnÃ¥ mÃ¥let behÃ¶ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(goal,"Piteator/goal.RDS")
readRDS("Piteator/goal.RDS")
#Title
#=====
title <- "PiteÃ¥ tur och retur 2022"
saveRDS(title,"Piteator/title.RDS")
readRDS("Piteator/title.RDS")
texts <- c()
texts$title <- "Pite? tur och retur 2022"
texts$trend_dev <- paste(dev,"km fr?n ideallinjen")
texts$goal_w <- paste("F?r att uppn? mÃ¥let beh?ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(texts,"Piteator/texts.RDS")
readRDS("Piteator/texts.RDS")
#Deviation from trendline
#========================
real_data <- real_data[real_data$type == substr(Sys.Date(),1,4),]
last_date <- real_data$Day[nrow(real_data)]
dev <- round(trendline_data$cum[last_date]-real_data$cum[nrow(real_data)],0)
dev_text <- paste(dev,"km frÃ¥n ideallinjen")
saveRDS(dev_text,"Piteator/dev_text.RDS")
readRDS("Piteator/dev_text.RDS")
source("Metrics.R")
saveRDS(metrics,"metrics.RDS")
saveRDS(weekly,"weekly.RDS")
saveRDS(monthly,"monthly.RDS")
saveRDS(yearly,"yearly.RDS")
readRDS("metrics.RDS")
saveRDS(metrics,"Piteator/metrics.RDS")
saveRDS(weekly,"Piteator/weekly.RDS")
saveRDS(monthly,"Piteator/monthly.RDS")
saveRDS(yearly,"Piteator/yearly.RDS")
#library(shiny)
#runApp("Piteator")
#install.packages('rsconnect')
rsconnect::setAccountInfo(name='anvi2533',
token='026B936A5A75EBDFDAE8AE09012C4BF0',
secret='fAQVZf7CdgMV8pUsG0l9Ud3x9pLZ3qhd8vBOdqgG')
library(rsconnect)
rsconnect::deployApp("Piteator", forceUpdate = T)
#source("install_pack.R")
source("Load_lib.R")
#Location of the GPX files
path = paste(getwd(),"/GPX/",sep = "")
files <- list.files(path)
files <- unique(files)
#check if update is needed
nr_files <- length(files)
check <- readRDS("nr_files.RDS")
datalist = list()
date_time <- c()
training_date <- c()
if(nr_files != check){
#create distance vector
source("fn_distance_vector.R")
distance <- fn_distance_vector()
saveRDS(distance,"distance.RDS")
#create date time vector
source("fn_datetime_vector.R")
date_time <- fn_datetime_vector()
saveRDS(date_time,"date_time.RDS")
#create duration vector
source("fn_duration_vector.R")
duration <- fn_duration_vector()
saveRDS(duration,"duration.RDS")
saveRDS(nr_files,"nr_files.RDS")
saveRDS(nr_files,"Piteator/nr_files.RDS")
}
source("create_df_from_vectors.R", encoding = 'ISO-8859-1')
#Distance 2022 so far
dist_2022 <- df[!is.na(df$CY),]
current_stat <- sum(dist_2022$Distance)
m_left <- (1610000 - current_stat)/10000
print(paste(round(m_left,2), "mil"))
source("trendline.R", encoding = 'ISO-8859-1')
saveRDS(p,"trendline.RDS")
saveRDS(p,"Piteator/trendline.RDS")
readRDS("trendline.RDS")
source("Locus.R")
saveRDS(n,"piteator.RDS")
saveRDS(n,"Piteator/piteator.RDS")
readRDS("piteator.RDS")
#street view: http://www.instantstreetview.com/s/61.14598,17.03262
path = paste(getwd(),"/GPX/",files[length(files)],sep = "")
source("LastRun.R")
saveRDS(m,"latest_run.RDS")
saveRDS(m,"Piteator/latest_run.RDS")
readRDS("latest_run.RDS")
saveRDS(speed_list,"Piteator/km_list.RDS")
#Goal
#====
w_left <- as.numeric((as.Date("2022-12-31") - Sys.Date())/7)
km_left <- m_left*10
goal <- paste("FÃ¶r att uppnÃ¥ mÃ¥let behÃ¶ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(goal,"Piteator/goal.RDS")
readRDS("Piteator/goal.RDS")
#Title
#=====
title <- "PiteÃ¥ tur och retur 2022"
saveRDS(title,"Piteator/title.RDS")
readRDS("Piteator/title.RDS")
texts <- c()
texts$title <- "Pite? tur och retur 2022"
texts$trend_dev <- paste(dev,"km fr?n ideallinjen")
texts$goal_w <- paste("F?r att uppn? mÃ¥let beh?ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(texts,"Piteator/texts.RDS")
readRDS("Piteator/texts.RDS")
#Deviation from trendline
#========================
real_data <- real_data[real_data$type == substr(Sys.Date(),1,4),]
last_date <- real_data$Day[nrow(real_data)]
dev <- round(trendline_data$cum[last_date]-real_data$cum[nrow(real_data)],0)
dev_text <- paste(dev,"km frÃ¥n ideallinjen")
saveRDS(dev_text,"Piteator/dev_text.RDS")
readRDS("Piteator/dev_text.RDS")
source("Metrics.R")
saveRDS(metrics,"metrics.RDS")
saveRDS(weekly,"weekly.RDS")
saveRDS(monthly,"monthly.RDS")
saveRDS(yearly,"yearly.RDS")
readRDS("metrics.RDS")
saveRDS(metrics,"Piteator/metrics.RDS")
saveRDS(weekly,"Piteator/weekly.RDS")
saveRDS(monthly,"Piteator/monthly.RDS")
saveRDS(yearly,"Piteator/yearly.RDS")
#library(shiny)
#runApp("Piteator")
#install.packages('rsconnect')
rsconnect::setAccountInfo(name='anvi2533',
token='026B936A5A75EBDFDAE8AE09012C4BF0',
secret='fAQVZf7CdgMV8pUsG0l9Ud3x9pLZ3qhd8vBOdqgG')
library(rsconnect)
rsconnect::deployApp("Piteator", forceUpdate = T)
#source("install_pack.R")
source("Load_lib.R")
#Location of the GPX files
path = paste(getwd(),"/GPX/",sep = "")
files <- list.files(path)
files <- unique(files)
#check if update is needed
nr_files <- length(files)
check <- readRDS("nr_files.RDS")
datalist = list()
date_time <- c()
training_date <- c()
if(nr_files != check){
#create distance vector
source("fn_distance_vector.R")
distance <- fn_distance_vector()
saveRDS(distance,"distance.RDS")
#create date time vector
source("fn_datetime_vector.R")
date_time <- fn_datetime_vector()
saveRDS(date_time,"date_time.RDS")
#create duration vector
source("fn_duration_vector.R")
duration <- fn_duration_vector()
saveRDS(duration,"duration.RDS")
saveRDS(nr_files,"nr_files.RDS")
saveRDS(nr_files,"Piteator/nr_files.RDS")
}
source("create_df_from_vectors.R", encoding = 'ISO-8859-1')
#create distance vector
source("fn_distance_vector.R")
distance <- fn_distance_vector()
saveRDS(distance,"distance.RDS")
#create date time vector
source("fn_datetime_vector.R")
date_time <- fn_datetime_vector()
saveRDS(date_time,"date_time.RDS")
#create duration vector
source("fn_duration_vector.R")
duration <- fn_duration_vector()
saveRDS(duration,"duration.RDS")
saveRDS(nr_files,"nr_files.RDS")
saveRDS(nr_files,"Piteator/nr_files.RDS")
source("create_df_from_vectors.R", encoding = 'ISO-8859-1')
df
df[120:nrow(df),]
#Join vectors into a data_frame
df <- c()
df <- data.frame(readRDS("date_time.RDS"),readRDS("duration.RDS"),readRDS("distance.RDS"))
names(df)[1] <- "DateTime"
names(df)[2] <- "Duration"
names(df)[3] <- "Distance"
Current_Year <- substr(Sys.Date(),1,4)
Last_Year <- as.numeric(substr(Sys.Date(),1,4))-1
Current_Week <- strftime(Sys.Date(), format = "%V")
Last_Week <- as.numeric(Current_Week)-1
Current_Month <- substr(Sys.Date(),1,7)
#Last_Month
current <- c("01","02","03","04","05","06","07","08","09","10","11","12")
prev <- c("12","01","02","03","04","05","06","07","08","09","10","11")
index <- match(substr(Sys.Date(),6,7), current)
#prev[index]
Last_Month <- paste(substring(Sys.Date(),1,5),prev[index],sep="")
#Day of year
library(lubridate)
#Add more columns
#length(distance)
#length(duration)
#nrow(df)
df$Pace <- distance/(1000*duration)
df$Week_nr <- strftime(df$DateTime, format = "%V")
df$Runda[df$Distance > 32700 & df$Distance < 32900] <- "Morkarla"
df$Runda[df$Distance > 13400 & df$Distance < 14500] <- "Löddby"
df$Runda[df$Distance > 26600 & df$Distance < 27200] <- "Voxome_Haberga"
df$Runda[df$Distance > 18100 & df$Distance < 18600] <- "Golvsta_Haberga"
df$Runda[df$Distance > 19700 & df$Distance < 20000 & substr(df$DateTime,1,4) == "2022"] <- "Special"
df$Runda[df$Distance > 36000 & df$Distance < 36700 & substr(df$DateTime,1,4) == "2022"] <- "Voxome_Löddby"
df$Runda[df$Distance > 50200 & df$Distance < 51250 & substr(df$DateTime,1,4) == "2022"] <- "Gimo-Fornbro"
df$Runda[df$Distance > 47200 & df$Distance < 47300 & substr(df$DateTime,1,4) == "2022"] <- "Lyan-Bladåker"
df$Runda[120] <- "Special"
df$Runda[149] <- "Vikingarundan"
df$Yday <- yday(df$DateTime)
df$CY[substr(df$DateTime,1,4) == Current_Year] <- 1
df$LY[substr(df$DateTime,1,4) == Last_Year] <- 1
df$CM[substr(df$DateTime,1,7) == Current_Month] <- 1
df$LM[substr(df$DateTime,1,7) == Last_Month] <- 1
df$CW[df$Week_nr == Current_Week & substr(df$DateTime,1,4) == Current_Year] <- 1
df$LW[df$Week_nr == Last_Week & substr(df$DateTime,1,4) == Current_Year] <- 1
#sort ascending
df <- df[order(df$DateTime), ]
df[120:nrow(df),]
metrics_df <- df
#Position of last run
runda <- df$Runda[nrow(df)]
date <- as.Date(df$DateTime[nrow(df)])
runda_df <- df[df$Runda == runda & df$CY == 1,]
lista <- runda_df[!(is.na(runda_df$Runda)), ]
lista_desc <- lista[order(lista$Pace,decreasing = TRUE),]
position <- match(df$DateTime[nrow(df)],lista_desc$DateTime)
position_text <- paste("This run",date,"is in position",position,"out of",nrow(lista),runda,"runs")
saveRDS(position_text,"Piteator/pos_text.RDS")
#This run
lista_desc[position,]
#Best five runs
lista_desc$Date <- as.Date(lista_desc$DateTime)
lista_desc$Pace <- round(lista_desc$Pace,2)
source("fn_hhmmss.R")
for(i in 1:nrow(lista_desc)) {
lista_desc$Duration_hhmmss[i] <- fn_hhmmss(lista_desc$Duration[i])
}
best_10 <- lista_desc[1:10,c(14,15,4)]
names(best_10)[2] <- "Duration"
saveRDS(best_10,"Piteator/best_10.RDS")
#Fastest Löddby
loddby <- df[df$Runda == "Löddby" & df$CY == 1,]
loddby <- loddby[!(is.na(loddby$Runda)), ]
for(i in 1:length(loddby$Duration)) {
loddby$dur[i] <- fn_hhmmss(loddby$Duration[i])
}
loddby <- loddby[order(loddby$Pace,decreasing = TRUE),]
#Join vectors into a data_frame
df <- c()
df <- data.frame(readRDS("date_time.RDS"),readRDS("duration.RDS"),readRDS("distance.RDS"))
names(df)[1] <- "DateTime"
names(df)[2] <- "Duration"
names(df)[3] <- "Distance"
Current_Year <- substr(Sys.Date(),1,4)
Last_Year <- as.numeric(substr(Sys.Date(),1,4))-1
Current_Week <- strftime(Sys.Date(), format = "%V")
Last_Week <- as.numeric(Current_Week)-1
Current_Month <- substr(Sys.Date(),1,7)
#Last_Month
current <- c("01","02","03","04","05","06","07","08","09","10","11","12")
prev <- c("12","01","02","03","04","05","06","07","08","09","10","11")
index <- match(substr(Sys.Date(),6,7), current)
#prev[index]
Last_Month <- paste(substring(Sys.Date(),1,5),prev[index],sep="")
#Day of year
library(lubridate)
#Add more columns
#length(distance)
#length(duration)
#nrow(df)
df$Pace <- distance/(1000*duration)
df$Week_nr <- strftime(df$DateTime, format = "%V")
df$Runda[df$Distance > 32700 & df$Distance < 32900] <- "Morkarla"
df$Runda[df$Distance > 13400 & df$Distance < 14500] <- "Löddby"
df$Runda[df$Distance > 26600 & df$Distance < 27200] <- "Voxome_Haberga"
df$Runda[df$Distance > 18100 & df$Distance < 18600] <- "Golvsta_Haberga"
df$Runda[df$Distance > 19700 & df$Distance < 20000 & substr(df$DateTime,1,4) == "2022"] <- "Special"
df$Runda[df$Distance > 36000 & df$Distance < 36700 & substr(df$DateTime,1,4) == "2022"] <- "Voxome_Löddby"
df$Runda[df$Distance > 50200 & df$Distance < 51250 & substr(df$DateTime,1,4) == "2022"] <- "Gimo-Fornbro"
df$Runda[df$Distance > 47200 & df$Distance < 47300 & substr(df$DateTime,1,4) == "2022"] <- "Lyan-Bladåker"
df$Runda[120] <- "Special"
df$Runda[149] <- "Vikingarundan"
df$Yday <- yday(df$DateTime)
df$CY[substr(df$DateTime,1,4) == Current_Year] <- 1
df$LY[substr(df$DateTime,1,4) == Last_Year] <- 1
df$CM[substr(df$DateTime,1,7) == Current_Month] <- 1
df$LM[substr(df$DateTime,1,7) == Last_Month] <- 1
df$CW[df$Week_nr == Current_Week & substr(df$DateTime,1,4) == Current_Year] <- 1
df$LW[df$Week_nr == Last_Week & substr(df$DateTime,1,4) == Current_Year] <- 1
df <- df[order(df$DateTime), ]
df[120:nrow(df),]
Distance
readRDS("date_time.RDS")
#source("install_pack.R")
source("Load_lib.R")
#Location of the GPX files
path = paste(getwd(),"/GPX/",sep = "")
files <- list.files(path)
files <- unique(files)
#check if update is needed
nr_files <- length(files)
check <- readRDS("nr_files.RDS")
datalist = list()
date_time <- c()
training_date <- c()
#create distance vector
source("fn_distance_vector.R")
distance <- fn_distance_vector()
saveRDS(distance,"distance.RDS")
distance
source("fn_datetime_vector.R")
date_time <- fn_datetime_vector()
saveRDS(date_time,"date_time.RDS")
date_time
fn_datetime_vector()
length(files))
#source("install_pack.R")
source("Load_lib.R")
#Location of the GPX files
path = paste(getwd(),"/GPX/",sep = "")
files <- list.files(path)
files <- unique(files)
#check if update is needed
nr_files <- length(files)
check <- readRDS("nr_files.RDS")
datalist = list()
date_time <- c()
training_date <- c()
#create distance vector
source("fn_distance_vector.R")
distance <- fn_distance_vector()
saveRDS(distance,"distance.RDS")
#create date time vector
source("fn_datetime_vector.R")
date_time <- fn_datetime_vector()
saveRDS(date_time,"date_time.RDS")
#create duration vector
source("fn_duration_vector.R")
duration <- fn_duration_vector()
saveRDS(duration,"duration.RDS")
saveRDS(nr_files,"nr_files.RDS")
saveRDS(nr_files,"Piteator/nr_files.RDS")
source("create_df_from_vectors.R", encoding = 'ISO-8859-1')
#Distance 2022 so far
dist_2022 <- df[!is.na(df$CY),]
current_stat <- sum(dist_2022$Distance)
m_left <- (1610000 - current_stat)/10000
print(paste(round(m_left,2), "mil"))
source("trendline.R", encoding = 'ISO-8859-1')
saveRDS(p,"trendline.RDS")
saveRDS(p,"Piteator/trendline.RDS")
readRDS("trendline.RDS")
source("Locus.R")
saveRDS(n,"piteator.RDS")
saveRDS(n,"Piteator/piteator.RDS")
readRDS("piteator.RDS")
#street view: http://www.instantstreetview.com/s/61.14598,17.03262
path = paste(getwd(),"/GPX/",files[length(files)],sep = "")
source("LastRun.R")
saveRDS(m,"latest_run.RDS")
saveRDS(m,"Piteator/latest_run.RDS")
readRDS("latest_run.RDS")
saveRDS(speed_list,"Piteator/km_list.RDS")
#Goal
#====
w_left <- as.numeric((as.Date("2022-12-31") - Sys.Date())/7)
km_left <- m_left*10
goal <- paste("FÃ¶r att uppnÃ¥ mÃ¥let behÃ¶ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(goal,"Piteator/goal.RDS")
readRDS("Piteator/goal.RDS")
#Title
#=====
title <- "PiteÃ¥ tur och retur 2022"
saveRDS(title,"Piteator/title.RDS")
readRDS("Piteator/title.RDS")
texts <- c()
texts$title <- "Pite? tur och retur 2022"
texts$trend_dev <- paste(dev,"km fr?n ideallinjen")
texts$goal_w <- paste("F?r att uppn? mÃ¥let beh?ver jag cykla", round(km_left/w_left,2), "km per vecka")
saveRDS(texts,"Piteator/texts.RDS")
readRDS("Piteator/texts.RDS")
#Deviation from trendline
#========================
real_data <- real_data[real_data$type == substr(Sys.Date(),1,4),]
last_date <- real_data$Day[nrow(real_data)]
dev <- round(trendline_data$cum[last_date]-real_data$cum[nrow(real_data)],0)
dev_text <- paste(dev,"km frÃ¥n ideallinjen")
saveRDS(dev_text,"Piteator/dev_text.RDS")
readRDS("Piteator/dev_text.RDS")
source("Metrics.R")
saveRDS(metrics,"metrics.RDS")
saveRDS(weekly,"weekly.RDS")
saveRDS(monthly,"monthly.RDS")
saveRDS(yearly,"yearly.RDS")
readRDS("metrics.RDS")
saveRDS(metrics,"Piteator/metrics.RDS")
saveRDS(weekly,"Piteator/weekly.RDS")
saveRDS(monthly,"Piteator/monthly.RDS")
saveRDS(yearly,"Piteator/yearly.RDS")
#library(shiny)
#runApp("Piteator")
#install.packages('rsconnect')
rsconnect::setAccountInfo(name='anvi2533',
token='026B936A5A75EBDFDAE8AE09012C4BF0',
secret='fAQVZf7CdgMV8pUsG0l9Ud3x9pLZ3qhd8vBOdqgG')
library(rsconnect)
rsconnect::deployApp("Piteator", forceUpdate = T)
